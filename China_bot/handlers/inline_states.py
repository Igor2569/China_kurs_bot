from aiogram import Bot, Dispatcher, executor,types
from aiogram.dispatcher import FSMContext
from loader import dp,bot
import utils

def save_to_file(filename, text):
    with open(filename, 'w', encoding='utf-8') as file:
        file.write(text)


@dp.message_handler(state = utils.get_kurs.kurs)
async def Kurs(message:types.Message,state:FSMContext):
    f = open('data/textes/kurs.txt','w')
    f.write(message.text)
    f.close()
    await bot.send_message(chat_id=message.from_user.id,
                           text = '–ù–æ–≤—ã–π –∫—É—Ä—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
    return

@dp.message_handler(state=utils.Settings.start_text)
async def process_start_text(message: types.Message, state: FSMContext):
    save_to_file('start_text.txt', message.text)
    await message.answer("–°—Ç–∞—Ä—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!")
    await state.finish()

@dp.message_handler(state=utils.Settings.guides)
async def process_guides(message: types.Message, state: FSMContext):
    save_to_file('guides.txt', message.text)
    await message.answer("–¢–µ–∫—Å—Ç –≥–∞–π–¥–æ–≤ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!")
    await state.finish()

@dp.message_handler(state=utils.Settings.questions)
async def process_questions(message: types.Message, state: FSMContext):
    save_to_file('data/textes/questions.txt', message.text)
    await message.answer("–¢–µ–∫—Å—Ç —á–∞—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!")
    await state.finish()

@dp.message_handler(state=utils.Settings.link)
async def process_link(message: types.Message, state: FSMContext):
    save_to_file('data/textes/reviews.txt', message.text)
    await message.answer("–°—Å—ã–ª–∫–∞ —Å –æ—Ç–∑—ã–≤–∞–º–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!")
    await state.finish()

@dp.message_handler(state=utils.Settings.user_id)
async def process_user_id(message: types.Message, state: FSMContext):
    save_to_file('data/textes/admins.txt', message.text)
    await message.answer("User_id –∑–∞–∫–∞–∑—á–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!")
    await state.finish()

@dp.message_handler(state=utils.Settings.ambassador)
async def process_ambassador(message: types.Message, state: FSMContext):
    save_to_file('data/textes/ambassador.txt', message.text)
    await message.answer("–¢–µ–∫—Å—Ç –∞–º–±–∞—Å—Å–∞–¥–æ—Ä—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!")
    await state.finish()
@dp.message_handler(state = utils.Settings.group_id)
async def process_groupId(message:types.Message,state:FSMContext):
    save_to_file('data/textes/ambassador.txt', message.text)
    await message.answer("–ê–π–¥–∏ –∫–∞–Ω–∞–ª–∞ —Å –∑–∞—è–≤–∫–∞–º–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    await state.finish()

@dp.message_handler(state=utils.OrderForm.waiting_for_product_name)
async def process_product_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['product_name'] = message.text
        data['user_id'] = message.from_user.id
        data['username'] = message.from_user.username
    
    await utils.OrderForm.next()
    await message.answer("üìè –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞:")

@dp.message_handler(state=utils.OrderForm.waiting_for_size)
async def process_size(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['size'] = message.text
    
    await utils.OrderForm.next()
    await message.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:")


@dp.message_handler(content_types=['photo'], state=utils.OrderForm.waiting_for_photo)
async def process_photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['photo_id'] = message.photo[-1].file_id
    
    await utils.OrderForm.next()
    await message.answer("üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä:")


@dp.message_handler(state=utils.OrderForm.waiting_for_link)
async def process_link(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['product_link'] = message.text
    
    await utils.OrderForm.next()
    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö:")


@dp.message_handler(state=utils.OrderForm.waiting_for_price)
async def process_price(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['price'] = message.text
        order_message = (
            "üöÄ *–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê!*\n\n"
            f"üë§ *–ö–ª–∏–µ–Ω—Ç:* @{data['username']} (ID: {data['user_id']})\n"
            f"üì¶ *–¢–æ–≤–∞—Ä:* {data['product_name']}\n"
            f"üìè *–†–∞–∑–º–µ—Ä:* {data['size']}\n"
            f"üí∞ *–¶–µ–Ω–∞:* {data['price']} ¬•\n"
            f"üîó *–°—Å—ã–ª–∫–∞:* {data['product_link']}\n\n"
            f"üÜî *ID –∑–∞—è–≤–∫–∏:* {message.message_id + 1}"
        )
        
        f = open('data/textes/group_id.txt','r')
        GROUP_ID = int(f.read())
        try:
            if 'photo_id' in data:
                await bot.send_photo(
                    chat_id=GROUP_ID,
                    photo=data['photo_id'],
                    caption=order_message,
                    parse_mode='Markdown'
                )
            else:
                await bot.send_message(
                    chat_id=GROUP_ID,
                    text=order_message,
                    parse_mode='Markdown'
                )
            
            await message.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
            
        except Exception as e:
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            print(f"Error sending to group: {e}")
    
    await state.finish()