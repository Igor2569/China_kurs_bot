from aiogram import types
from loader import dp,bot
from data import config
import utils
import os

def read_file(filename, default_text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."):
    try:
        if os.path.exists(filename):
            with open(filename, 'r', encoding='utf-8') as file:
                content = file.read().strip()
                return content if content else default_text
    except Exception as e:
        print(f"Error reading {filename}: {e}")
    return default_text

@dp.message_handler(lambda message:message.text=='–ö—É—Ä—Å')
async def GetKurs(message:types.Message):
        f = open('data/textes/kurs.txt','r')
        kurs = f.read()
        f.close()
        await bot.send_message(chat_id=message.from_user.id,
                               text = f'–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å {kurs} —Ä—É–±–ª–µ–π = 1 —é–∞–Ω—å.')
        return
@dp.message_handler(lambda message:message.text=='–ò–¥–µ–∏ –∞–º–±–∞—Å—Å–∞–¥–æ—Ä—Å—Ç–≤–∞')
async def Ambassador(message:types.Message):
        f = open('data/textes/ambassador.txt','r')
        text = f.read()
        f.close()
        await bot.send_message(chat_id=message.from_user.id,
                               text = text)
        return


@dp.message_handler(lambda message: message.text == '–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç')
async def change_start_text(message: types.Message):
    await utils.Settings.start_text.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç:", reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(lambda message: message.text == '–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –≥–∞–π–¥–æ–≤')
async def change_guides(message: types.Message):
    await utils.Settings.guides.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –≥–∞–π–¥–æ–≤:", reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(lambda message: message.text == '–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç —á–∞—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤')
async def change_questions(message: types.Message):
    await utils.Settings.questions.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —á–∞—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:", reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(lambda message: message.text == '–ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É —Å –æ—Ç–∑—ã–≤–∞–º–∏')
async def change_link(message: types.Message):
    await utils.Settings.link.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É —Å –æ—Ç–∑—ã–≤–∞–º–∏:", reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(lambda message: message.text == '–ò–∑–º–µ–Ω–∏—Ç—å user_id –∑–∞–∫–∞–∑—á–∏–∫–∞')
async def change_user_id(message: types.Message):
    await utils.Settings.user_id.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π user_id –∑–∞–∫–∞–∑—á–∏–∫–∞:", reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(lambda message: message.text == '–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∞–º–±–∞—Å—Å–∞–¥–æ—Ä—Å—Ç–≤–∞')
async def change_ambassador(message: types.Message):
    await utils.Settings.ambassador.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∞–º–±–∞—Å—Å–∞–¥–æ—Ä—Å—Ç–≤–∞:", reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(lambda message: message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –∞–π–¥–∏ –∫–∞–Ω–∞–ª–∞ —Å –∑–∞—è–≤–∫–∞–º–∏')
async def change_ambassador(message: types.Message):
    await utils.Settings.group_id.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –∑–∞—è–≤–æ–∫", reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(lambda message: message.text == '–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑')
async def start_order(message: types.Message):
    await utils.OrderForm.waiting_for_product_name.set()
    await message.answer("üëï –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ö—Ä–æ—Å—Å–æ–≤–∫–∏ Nike Air Force'):", 
                         reply_markup=types.ReplyKeyboardRemove())


@dp.message_handler(lambda message: message.text == '–ì–∞–π–¥—ã')
async def send_guides(message: types.Message):
    guides_text = read_file('data/textes/guides.txt', '–ì–∞–π–¥—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.')
    await message.answer(f"üìö –ì–∞–π–¥—ã:\n{guides_text}")

@dp.message_handler(lambda message: message.text == '–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã')
async def send_questions(message: types.Message):
    questions_text = read_file('data/textes/questions.txt', '–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.')
    await message.answer(f"‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n{questions_text}")

@dp.message_handler(lambda message: message.text == '–û—Ç–∑—ã–≤—ã')
async def send_reviews(message: types.Message):
    reviews_text = read_file('data/textes/reviews.txt', '–û—Ç–∑—ã–≤—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.')
    await message.answer(f"‚≠ê –û—Ç–∑—ã–≤—ã:\n{reviews_text}")

@dp.message_handler(lambda message: message.text == '–ê–º–±–∞—Å—Å–∞–¥–æ—Ä—Å—Ç–≤–æ')
async def send_ambassador(message: types.Message):
    ambassador_text = read_file('data/textes/ambassador.txt', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–º–±–∞—Å—Å–∞–¥–æ—Ä—Å—Ç–≤–µ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞.')
    await message.answer(f"üåü –ê–º–±–∞—Å—Å–∞–¥–æ—Ä—Å—Ç–≤–æ:\n{ambassador_text}")

@dp.message_handler(lambda message: message.text == '–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å —é–∞–Ω—è')
async def send_kurs(message: types.Message):
    kurs_text = read_file('kurs.txt', '–ö—É—Ä—Å —é–∞–Ω—è –ø–æ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.')
    await message.answer(f"üí∞ –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å —é–∞–Ω—è:\n{kurs_text}")
